from datetime import datetime
from query_generator import generate_search_queries
from api_clients import google_search, brave_search
from config_loader import load_settings

settings = load_settings()

def perform_gpt_generated_searches():
    date_str = datetime.now().strftime("%Y-%m-%d")
    queries_by_topic = generate_search_queries(date_str)

    max_results_per_query = settings["search"]["max_results_per_topic"]
    primary_provider = settings["search"]["primary_provider"]
    fallback_provider = settings["search"]["fallback_provider"]
    search_language = settings["search"].get("search_language", "en")

    search_results = {}

    print(f"\nüîé GPT √°ltal gener√°lt keres√©sek futtat√°sa d√°tummal: {date_str}\n")

    for topic, queries in queries_by_topic.items():
        print(f"üìå T√©ma: {topic}")
        search_results[topic] = {"topic_name": topic, "results": []}

        for query in queries:
            print(f" - Lek√©rdez√©s: '{query}'")

            results = []

            # Els≈ëdleges keres≈ë API
            if primary_provider == "google":
                try:
                    results = google_search(query, max_results_per_query, language=search_language)
                    if not results:
                        raise ValueError("Google API nem adott tal√°latot.")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Google API hiba vagy limit: {e}, √°tv√°lt√°s Brave API-ra.")
                    results = brave_search(query, max_results_per_query, language=search_language)

            elif primary_provider == "brave":
                try:
                    results = brave_search(query, max_results_per_query, language=search_language)
                    if not results:
                        raise ValueError("Brave API nem adott tal√°latot.")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Brave API hiba vagy limit: {e}, √°tv√°lt√°s Google API-ra.")
                    results = google_search(query, max_results_per_query, language=search_language)

            else:
                print(f"   ‚ö†Ô∏è Ismeretlen els≈ëdleges keres≈ëszolg√°ltat√≥: '{primary_provider}'.")

            # Ha m√©g mindig nincs eredm√©ny, logoljuk
            if not results:
                print(f"   ‚ùå Nincs tal√°lat a '{query}' lek√©rdez√©sre egyik API-n√°l sem.")
            else:
                print(f"   ‚úÖ {len(results)} tal√°lat √©rkezett.")

            search_results[topic]["results"].extend(results)

    print("\nüéØ Keres√©sek befejezve.")
    return search_results

# Tesztfuttat√°s (√∂n√°ll√≥ scriptk√©nt val√≥ futtat√°sra)
if __name__ == "__main__":
    final_results = perform_gpt_generated_searches()

    # R√∂vid √∂sszegz√©s ki√≠rat√°sa a termin√°lra ellen≈ërz√©shez
    for topic, data in final_results.items():
        print(f"\nüìö Eredm√©nyek a '{topic}' t√©m√°ban ({len(data['results'])} tal√°lat):")
        for res in data['results']:
            print(f"- {res['title']} ({res['link']})")